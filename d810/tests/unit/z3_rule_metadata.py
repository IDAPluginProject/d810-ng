from dataclasses import dataclass


@dataclass(frozen=True, slots=True)
class RuleInfo:
    name: str
    expr: str
    known_incorrect: bool = False
    comment: str | None = None


RULES: list[RuleInfo] = [
    RuleInfo(
        name="Add_HackersDelightRule_1",
        expr="(x_0 - (~(x_1) - 0x1)) => (x_0 + x_1)",
        known_incorrect=True,
        comment="The rule is mathematically incorrect. LHS is x+y+2.",
    ),
    RuleInfo(
        name="Add_HackersDelightRule_2",
        expr="((x_0 ^ x_1) + (0x2 * (x_0 & x_1))) => (x_0 + x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Add_HackersDelightRule_3",
        expr="((x_0 | x_1) + (x_0 & x_1)) => (x_0 + x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Add_HackersDelightRule_4",
        expr="((0x2 * (x_0 | x_1)) - (x_0 ^ x_1)) => (x_0 + x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Add_HackersDelightRule_5",
        expr="((0x2 * ((x_0 | x_1) | x_2)) - (x_0 ^ (x_1 | x_2))) => (x_0 + (x_1 | x_2))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Add_SpecialConstantRule_1",
        expr="((x_0 ^ c_1) + (0x2 * (x_0 & c_2))) => (x_0 + c_1)",
        known_incorrect=True,
        comment="This is only true if c_2 == c_1. The general rule is false.",
    ),
    RuleInfo(
        name="Add_SpecialConstantRule_2",
        expr="(((x_0 & 0xff) ^ c_1) + (0x2 * (x_0 & c_2))) => (x_0 + c_1)",
        known_incorrect=True,
        comment="The `& 0xff` on the LHS makes this fundamentally different from the RHS.",
    ),
    RuleInfo(
        name="Add_SpecialConstantRule_3",
        expr="((x_0 ^ c_1) + (0x2 * (x_0 | c_2))) => (x_0 + val_res)",
        known_incorrect=True,
        comment="The constraint for val_res is complex and the provided one is likely wrong.",
    ),
    RuleInfo(
        name="Add_OllvmRule_1",
        expr="(~((x_0 ^ x_1)) + (0x2 * (x_1 | x_0))) => ((x_0 + x_1) - val_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Add_OllvmRule_2",
        expr="(~((x_0 ^ x_1)) - (val_fe * (x_0 | x_1))) => ((x_0 + x_1) - val_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Add_OllvmRule_3",
        expr="((x_0 ^ x_1) + (0x2 * (x_0 & x_1))) => (x_0 + x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Add_OllvmRule_3",
        expr="((x_0 ^ x_1) + (0x2 * (x_0 & x_1))) => (x_0 + x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Add_OllvmRule_4",
        expr="((x_0 ^ x_1) - (val_fe * (x_0 & x_1))) => (x_0 + x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="AddXor_Rule_1",
        expr="((x_0 - x_1) - (0x2 * (x_0 | bnot_x_1))) => ((x_0 ^ x_1) + val_2)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="AddXor_Rule_2",
        expr="((x_0 - x_1) - (0x2 * ~((bnot_x_0 & x_1)))) => ((x_0 ^ x_1) + val_2)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="And_HackersDelightRule_1",
        expr="((~(x_0) | x_1) - ~(x_0)) => (x_0 & x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="And_HackersDelightRule_2",
        expr="((bnot_x_0 | x_1) + (x_0 + 0x1)) => (x_0 & x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="And_HackersDelightRule_3",
        expr="((x_0 + x_1) - (x_0 | x_1)) => (x_0 & x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="And_HackersDelightRule_4",
        expr="((x_0 | x_1) - (x_0 ^ x_1)) => (x_0 & x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="And_OllvmRule_1",
        expr="((x_0 | x_1) & ~((x_0 ^ x_1))) => (x_0 & x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="And_OllvmRule_2",
        expr="((x_0 | x_1) & (x_0 ^ bnot_x_1)) => (x_0 & x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="And_OllvmRule_3",
        expr="((x_0 & x_1) & ~((x_0 ^ x_1))) => (x_0 & x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="And_FactorRule_1",
        expr="((x_0 ^ bnot_x_1) & x_1) => (x_0 & x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="And_FactorRule_2",
        expr="(x_0 & ~((x_0 ^ x_1))) => (x_0 & x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="AndBnot_HackersDelightRule_1",
        expr="((x_0 | x_1) - x_1) => (x_0 & ~(x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="AndBnot_HackersDelightRule_2",
        expr="(x_0 - (x_0 & x_1)) => (x_0 & ~(x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="AndBnot_FactorRule_1",
        expr="(x_0 ^ (x_0 & x_1)) => (x_0 & ~(x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="AndBnot_FactorRule_2",
        expr="(x_0 & (x_0 ^ x_1)) => (x_0 & ~(x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="AndBnot_FactorRule_3",
        expr="((x_0 | x_1) ^ x_1) => (x_0 & ~(x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="AndBnot_FactorRule_4",
        expr="((x_1 ^ x_0) & ~((x_0 & bnot_x_1))) => (x_1 & ~(x_0))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="AndOr_FactorRule_1",
        expr="((x_0 & x_2) | (x_1 & x_2)) => ((x_0 | x_1) & x_2)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="AndXor_FactorRule_1",
        expr="((x_0 & x_2) ^ (x_1 & x_2)) => ((x_0 ^ x_1) & x_2)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="And1_MbaRule_1",
        expr="((x_0 * x_0) & 0x3) => (x_0 & val_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="AndGetUpperBits_FactorRule_1",
        expr="(c_1 * (LShR(x_0, c_2) & c_3)) => (x_0 & c_res)",
        known_incorrect=True,
        comment="This rule is only true under very specific (and unlikely) conditions on the constants.",
    ),
    RuleInfo(
        name="Bnot_HackersDelightRule_1",
        expr="(-(x_0) - 0x1) => ~(x_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Bnot_HackersDelightRule_2",
        expr="(~((x_0 | x_1)) | ~(x_1)) => ~(x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Bnot_MbaRule_1",
        expr="((x_0 - 0x1) - (0x2 * x_0)) => ~(x_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Bnot_FactorRule_1",
        expr="(~((x_0 ^ x_1)) ^ x_1) => ~(x_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Bnot_FactorRule_2",
        expr="(minus_1 - x_0) => ~(x_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Bnot_FactorRule_3",
        expr="((x_0 & x_1) ^ (x_0 | bnot_x_1)) => ~(x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Bnot_FactorRule_4",
        expr="(~(x_0) ^ ~(x_1)) => (x_0 ^ x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="BnotXor_Rule_1",
        expr="((x_0 & x_1) | (bnot_x_0 & bnot_x_1)) => ~((x_0 ^ x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="BnotXor_Rule_2",
        expr="((x_0 | x_1) ^ (bnot_x_0 | bnot_x_1)) => ~((x_0 ^ x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="BnotXor_Rule_3",
        expr="((x_0 | bnot_x_1) & (bnot_x_0 | x_1)) => ~((x_0 ^ x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="BnotXor_FactorRule_1",
        expr="(x_0 ^ ~(x_1)) => ~((x_0 ^ x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="BnotAnd_FactorRule_1",
        expr="((x_0 ^ x_1) | ~((x_0 | x_1))) => ~((x_0 & x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="BnotAnd_FactorRule_2",
        expr="((bnot_x_0 | bnot_x_1) | (x_0 ^ x_1)) => ~((x_0 & x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="BnotAnd_FactorRule_3",
        expr="(~(x_0) | ~(x_1)) => ~((x_0 & x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="BnotAnd_FactorRule_4",
        expr="(bnot_x_0 | (x_0 ^ x_1)) => ~((x_0 & x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="BnotOr_FactorRule_1",
        expr="(~(x_0) & ~(x_1)) => ~((x_0 | x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="BnotAdd_MbaRule_1",
        expr="((x_0 ^ bnot_x_1) - (0x2 * (x_0 & x_1))) => ~((x_0 + x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Bnot_Rule_1",
        expr="((x_0 & bnot_x_1) | ~((x_0 | x_1))) => (bnot_x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Bnot_XorRule_1",
        expr="((x_0 & x_1) | ~((x_0 | x_1))) => ~((x_0 ^ x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="CstSimplificationRule1",
        expr="(~(x_0) & (~(x_0) ^ c_1)) => ((x_0 & ~(c_1)) ^ ~(c_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="CstSimplificationRule2",
        expr="(((x_0 ^ c_1_1) & c_2_1) | ((x_0 ^ c_1_2) & c_2_2)) => (x_0 ^ c_res)",
        known_incorrect=False,
        comment="This identity requires that the constants used in the `&` and `^` are disjoint.",
    ),
    RuleInfo(
        name="CstSimplificationRule3",
        expr="((x_0 - c_0) + (c_1 * (x_0 - c_2))) => ((c_coeff * x_0) - c_sub)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="CstSimplificationRule4",
        expr="(x_0 - (c_1 - x_1)) => (x_0 + (x_1 + c_res))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="CstSimplificationRule5",
        expr="((x_0 & c_1) | (x_1 & c_2)) => (((x_0 ^ x_1) & c_1) ^ x_1)",
        known_incorrect=False,
        comment="This identity holds only if c_2 is the bitwise not of c_1",
    ),
    RuleInfo(
        name="CstSimplificationRule6",
        expr="((x_0 ^ c_1) & c_2) => ((x_0 & c_2) ^ c_res)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="CstSimplificationRule7",
        expr="LShR((x_0 & c_1), c_2) => (LShR(x_0, c_2) & c_res)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="CstSimplificationRule8",
        expr="((x_0 & c_1) | c_2) => ((x_0 & c_res) | c_2)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="CstSimplificationRule9",
        expr="((x_0 | c_1) & c_2) => ((x_0 & c_and) ^ c_xor)",
        known_incorrect=True,
        comment="The identity `(a|c)&d == (a&d)^(c&d)` is not generally true.",
    ),
    RuleInfo(
        name="CstSimplificationRule10",
        expr="((x_0 & c_1) - (x_0 & c_2)) => -((x_0 & c_and))",
        known_incorrect=True,
        comment="The identity `(a&c1)-(a&c2) == -(a&(c2&~c1))` is not generally true.",
    ),
    RuleInfo(
        name="CstSimplificationRule11",
        expr="((~(x_0) ^ c_1) | (x_0 & c_2)) => ((x_0 ^ c_1_bnot) ^ (x_0 & c_and))",
        known_incorrect=True,
        comment="This identity is not generally true.",
    ),
    RuleInfo(
        name="CstSimplificationRule12",
        expr="((c_1 - x_0) - (0x2 * (~(x_0) & c_2))) => ((~(x_0) ^ c_2) - c_diff)",
        known_incorrect=True,
        comment="This identity is not generally true.",
    ),
    RuleInfo(
        name="CstSimplificationRule13",
        expr="((cst_1 & (x_0 ^ x_1)) ^ x_1) => ((x_0 & cst_1) ^ (x_1 & not_cst_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="CstSimplificationRule14",
        expr="((x_0 & c_1) + c_2) => ((x_0 | lnot_c_1) + val_1)",
        known_incorrect=True,
        comment="This is only true if c_2 == c_1 + 1, but also requires x_0 & c_1 == 0.",
    ),
    RuleInfo(
        name="CstSimplificationRule15",
        expr="LShR(LShR(x_0, c_1), c_2) => LShR(x_0, c_res)",
        known_incorrect=True,
        comment="The constraint `c_res = c_1 + c_2` fails for symbolic bitvectors due to overflow/underflow.",
    ),
    RuleInfo(
        name="CstSimplificationRule16",
        expr="~((x_0 ^ c_1)) => (x_0 ^ bnot_c_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="CstSimplificationRule17",
        expr="~((x_0 | c_1)) => (~(x_0) & bnot_c_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="CstSimplificationRule18",
        expr="~((x_0 & c_1)) => (~(x_0) | bnot_c_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="CstSimplificationRule19",
        expr="((x_0 & c_1) >> c_2) => (LShR(x_0, c_2) & c_res)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="CstSimplificationRule20",
        expr="((bnot_x_0 & c_and_1) | ((x_0 & c_and_2) ^ c_xor)) => ((x_0 & c_and_res) ^ c_xor_res)",
        known_incorrect=True,
        comment="The provided constraints are insufficient for this complex transformation.",
    ),
    RuleInfo(
        name="CstSimplificationRule21",
        expr="(((x_0 & c_and) ^ c_xor_1) | ((x_0 & bnot_c_and) ^ c_xor_2)) => (x_0 ^ c_xor_res)",
        known_incorrect=True,
        comment="The provided constraints are insufficient for this complex transformation.",
    ),
    RuleInfo(
        name="CstSimplificationRule22",
        expr="(((x_0 & c_and) ^ c_xor_1) | ((bnot_x_0 & bnot_c_and) ^ c_xor_2)) => (x_0 ^ c_xor_res)",
        known_incorrect=True,
        comment="The provided constraints are insufficient for this complex transformation.",
    ),
    RuleInfo(
        name="GetIdentRule1",
        expr="((x_0 & x_1) + (x_0 & bnot_x_1)) => (x_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="GetIdentRule2",
        expr="((x_0 & x_1) ^ (x_0 & bnot_x_1)) => (x_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="GetIdentRule3",
        expr="(x_0 & (x_0 | x_1)) => (x_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Mul_MbaRule_1",
        expr="(((x_0 | x_1) * (x_0 & x_1)) + ((x_0 & bnot_x_1) * (x_1 & bnot_x_0))) => (x_0 * x_1)",
        known_incorrect=True,
        comment="Multiplication does not distribute over bitwise operations like this.",
    ),
    RuleInfo(
        name="Mul_MbaRule_2",
        expr="(((x_0 | c_1) * x_0) + ((x_0 & bnot_c_1) * (c_1 & bnot_x_0))) => (x_0 * c_1)",
        known_incorrect=True,
        comment="Multiplication does not distribute over bitwise operations like this.",
    ),
    RuleInfo(
        name="Mul_MbaRule_3",
        expr="(((x_0 | c_1) * (x_0 & c_1)) + (x_0 * (c_1 & bnot_x_0))) => (x_0 * c_1)",
        known_incorrect=True,
        comment="Multiplication does not distribute over bitwise operations like this.",
    ),
    RuleInfo(
        name="Mul_MbaRule_4",
        expr="(((x_0 | x_1) * (x_0 & x_1)) + (~((x_0 | bnot_x_1)) * (x_0 & bnot_x_1))) => (x_0 * x_1)",
        known_incorrect=True,
        comment="Multiplication does not distribute over bitwise operations like this.",
    ),
    RuleInfo(
        name="Mul_FactorRule_1",
        expr="(0x2 + (0x2 * (x_1 + (x_0 | bnot_x_1)))) => (0x2 * (x_0 & x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Mul_FactorRule_2",
        expr="(-((x_0 & x_1)) - (x_0 & x_1)) => (val_fe * (x_0 & x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Neg_HackersDelightRule_1",
        expr="(~(x_0) + 0x1) => -(x_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Neg_HackersDelightRule_2",
        expr="~((x_0 - 0x1)) => -(x_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="NegAdd_HackersDelightRule_1",
        expr="((val_fe * (x_0 | x_1)) + (x_0 ^ x_1)) => -((x_0 + x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="NegAdd_HackersDelightRule_2",
        expr="((x_0 ^ (x_1 | x_2)) - (0x2 * ((x_0 | x_1) | x_2))) => -((x_0 + (x_1 | x_2)))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="NegOr_HackersDelightRule_1",
        expr="((x_0 & x_1) - (x_0 + x_1)) => -((x_0 | x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="NegXor_HackersDelightRule_1",
        expr="((x_0 & x_1) - (x_0 | x_1)) => -((x_0 ^ x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="NegXor_HackersDelightRule_2",
        expr="((x_0 + x_1) - (0x2 * (x_0 | x_1))) => -((x_0 ^ x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Or_HackersDelightRule_1",
        expr="((x_0 & bnot_x_1) + x_1) => (x_0 | x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Or_HackersDelightRule_2",
        expr="((x_0 + x_1) - (x_0 & x_1)) => (x_0 | x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Or_HackersDelightRule_2_variant_1",
        expr="((x_0 - x_1) - (x_0 & -(x_1))) => (x_0 | -(x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Or_MbaRule_1",
        expr="((x_0 & x_1) + (x_0 ^ x_1)) => (x_0 | x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Or_MbaRule_2",
        expr="(((x_0 + x_1) + 0x1) + ~((x_1 & x_0))) => (x_0 | x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Or_MbaRule_3",
        expr="((x_0 + (x_0 ^ x_1)) - (x_0 & ~(x_1))) => (x_0 | x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Or_FactorRule_1",
        expr="((x_0 & x_1) | (x_0 ^ x_1)) => (x_0 | x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Or_FactorRule_2",
        expr="((x_0 & (x_1 ^ x_2)) | ((x_0 ^ x_1) ^ x_2)) => (x_0 | (x_1 ^ x_2))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Or_FactorRule_3",
        expr="((x_0 | x_1) | (bnot_x_0 ^ bnot_x_1)) => (x_0 | x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Or_OllvmRule_1",
        expr="((x_0 & x_1) | ~((bnot_x_0 ^ x_1))) => (x_0 | x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Or_Rule_1",
        expr="((bnot_x_0 & x_1) | x_0) => (x_0 | x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Or_Rule_2",
        expr="((x_0 ^ x_1) | x_1) => (x_0 | x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Or_Rule_3",
        expr="(~((bnot_x_0 | bnot_x_1)) | (x_0 ^ x_1)) => (x_0 | x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Or_Rule_4",
        expr="((x_0 & x_1) ^ (x_0 ^ x_1)) => (x_0 | x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="OrBnot_FactorRule_1",
        expr="(~(x_0) ^ (x_0 & x_1)) => (~(x_0) | x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="OrBnot_FactorRule_2",
        expr="(x_0 ^ (~(x_0) & x_1)) => (x_0 | x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="OrBnot_FactorRule_3",
        expr="((x_0 - x_1) + (bnot_x_0 | x_1)) => (x_0 | ~(x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="OrBnot_FactorRule_4",
        expr="((bnot_x_0 | x_1) ^ (x_0 ^ x_1)) => (x_0 | ~(x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredSetnzRule1",
        expr="((x_0 | c_1) != c_2) => (val_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredSetnzRule2",
        expr="((x_0 & c_1) != c_2) => (val_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredSetnzRule3",
        expr="(((x_0 | 0x2) + (x_0 ^ 0x2)) != 0x0) => (val_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredSetnzRule4",
        expr="(((cst_1 - x_0) ^ x_0) != 0x0) => (val_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredSetnzRule5",
        expr="(-((~(x_0) & 0x1)) != x_0) => (val_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredSetnzRule6",
        expr="(((x_0 + c_1) + ((x_0 + c_2) & 0x1)) != 0x0) => (val_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredSetnzRule8",
        expr="((~((0x3 - x_0)) ^ ~(x_0)) != 0x0) => (val_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredSetzRule1",
        expr="((x_0 | c_1) == c_2) => (val_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredSetzRule2",
        expr="((x_0 & c_1) == c_2) => (val_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredSetzRule3",
        expr="(((x_0 | 0x2) + (x_0 ^ 0x2)) == 0x0) => (val_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredSetbRule1",
        expr="((x_0 & c_1) < c_2) => (val_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredOdd1",
        expr="((x_0 * (x_0 - 0x1)) & 0x1) => (val_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredOdd2",
        expr="((x_0 * (x_0 + 0x1)) & 0x1) => (val_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Pred0Rule1",
        expr="(x_0 & ~(x_0)) => (val_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Pred0Rule2",
        expr="(xdu((x_0 & 0x1)) == 0x2) => (val_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Pred0Rule3",
        expr="(x_0 & ~((x_0 | x_1))) => (val_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Pred0Rule4",
        expr="((x_0 & x_1) & ~((x_0 | x_1))) => (val_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Pred0Rule5",
        expr="((x_0 & x_1) & (x_0 ^ x_1)) => (val_0)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredFFRule1",
        expr="(x_0 | ~(x_0)) => (val_ff)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredFFRule2",
        expr="((x_0 ^ x_1) | (bnot_x_0 | x_1)) => (val_ff)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredFFRule3",
        expr="(x_0 | ~((x_0 & x_1))) => (val_ff)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredFFRule4",
        expr="(x_0 | x_1) | (~(x_0 & x_1))  ==>  0xff",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredOr2_Rule_1",
        expr="(~((x_0 * x_0)) & 0x3) => ((~(x_0) & val_1) | val_2)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="PredOr1_Rule_1",
        expr="(x_0 ^ ((x_0 & 0x1) + 0x1)) => ((x_0 ^ (val_2 * (x_0 & val_1))) | val_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Sub_HackersDelightRule_1",
        expr="(x_0 + (~(x_1) + 0x1)) => (x_0 - x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Sub_HackersDelightRule_2",
        expr="((x_0 ^ x_1) - (0x2 * (~(x_0) & x_1))) => (x_0 - x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Sub_HackersDelightRule_3",
        expr="((x_0 & bnot_x_1) - (bnot_x_0 & x_1)) => (x_0 - x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Sub_HackersDelightRule_4",
        expr="((0x2 * (x_0 & bnot_x_1)) - (x_0 ^ x_1)) => (x_0 - x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Sub1_FactorRule_1",
        expr="((-(x_0) - 0x1) - (c_minus_2 * x_0)) => (x_0 - val_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Sub1_FactorRule_2",
        expr="((0x2 * x_0) + ~(x_0)) => (x_0 - 0x1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Sub1Add_HackersDelightRule_1",
        expr="((0x2 * (x_0 | x_1)) + (x_0 ^ bnot_x_1)) => ((x_0 + x_1) - val_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Sub1And_HackersDelightRule_1",
        expr="((x_0 | bnot_x_1) + x_1) => ((x_0 & x_1) - val_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Sub1Or_MbaRule_1",
        expr="((x_0 + x_1) + ~((x_0 & x_1))) => ((x_0 | x_1) - val_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Sub1And1_MbaRule_1",
        expr="((~(x_0) | 0x1) + x_0) => ((x_0 & val_1_1) - val_1_2)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Xor_HackersDelightRule_1",
        expr="((x_0 | x_1) - (x_0 & x_1)) => (x_0 ^ x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Xor_HackersDelightRule_2",
        expr="((0x2 * (x_0 | x_1)) - (x_0 + x_1)) => (x_0 ^ x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Xor_HackersDelightRule_3",
        expr="((x_0 + x_1) - (0x2 * (x_0 & x_1))) => (x_0 ^ x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Xor_HackersDelightRule_4",
        expr="(((x_0 - x_1) - (0x2 * (x_0 | ~(x_1)))) - 0x2) => (x_0 ^ x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Xor_HackersDelightRule_5",
        expr="(x_0 - ((0x2 * (x_0 & x_1)) - x_1)) => (x_0 ^ x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Xor_MbaRule_1",
        expr="(x_0 - ((0x2 * (x_1 & ~((x_0 ^ x_1)))) - x_1)) => (x_0 ^ x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Xor_MbaRule_2",
        expr="(x_0 - ((0x2 * (x_0 & x_1)) - x_1)) => (x_0 ^ x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Xor_MbaRule_3",
        expr="(x_0 - (0x2 * (x_0 & x_1))) => ((x_0 ^ x_1) - x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Xor_FactorRule_1",
        expr="((x_0 & bnot_x_1) | (bnot_x_0 & x_1)) => (x_0 ^ x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Xor_FactorRule_2",
        expr="((bnot_x_0 & x_1) ^ (x_0 & bnot_x_1)) => (x_0 ^ x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Xor_FactorRule_3",
        expr="((x_0 & x_1) ^ (x_0 | x_1)) => (x_0 ^ x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Xor_SpecialConstantRule_1",
        expr="((x_0 - x_1) + (0x2 * (~(x_0) & x_1))) => (x_0 ^ x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Xor_SpecialConstantRule_2",
        expr="(x_0 + ((0xfe * (x_0 & x_1)) + x_1)) => (x_0 ^ x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Xor1_MbaRule_1",
        expr="(~(x_0) + ((0x2 * x_0) | 0x2)) => (x_0 ^ val_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Xor_Rule_1",
        expr="((x_0 & x_1) | ~((x_0 | x_1))) => (x_0 ^ ~(x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Xor_Rule_2",
        expr="(((x_0 ^ x_2) & (x_1 ^ bnot_x2)) | ((x_0 ^ bnot_x2) & (x_1 ^ x_2))) => (x_0 ^ x_1)",
        known_incorrect=True,
        comment="This identity is not generally true.",
    ),
    RuleInfo(
        name="Xor_Rule_3",
        expr="(((x_0 ^ x_2) & (x_1 ^ x_2)) | ((x_0 ^ bnot_x2) & (x_1 ^ bnot_x2))) => (~(x_0) ^ x_1)",
        known_incorrect=True,
        comment="This identity is not generally true.",
    ),
    RuleInfo(
        name="XorAlmost_Rule_1",
        expr="((x_0 + x_1) - (0x2 * (x_0 | (x_1 - 0x1)))) => ((x_0 ^ -(x_1)) + val_2)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="Xor_NestedStuff",
        expr="(((x_9 + x_10) + x_11) - (x_14 + (0x2 * (x_10 & ((x_9 + x_11) - x_14))))) => (x_10 ^ ((x_9 + x_11) - x_14))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="WeirdRule1",
        expr="(x_0 - (x_0 | x_1)) => ((x_0 | ~(x_1)) + val_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="WeirdRule2",
        expr="((0x2 * x_0) - (x_0 & ~(x_1))) => (x_0 + (x_0 & x_1))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="WeirdRule3",
        expr="((x_0 & ~(x_1)) - (0x2 * x_0)) => -((x_0 + (x_0 & x_1)))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="WeirdRule4",
        expr="((x_0 & bnot_x_1) - (x_0 & x_1)) => ((x_0 ^ x_1) - x_1)",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="WeirdRule5",
        expr="(((bnot_x_0 | (bnot_x_1 & x_2)) + (x_0 + (x_1 & x_2))) - x_2) => (x_0 | (x_1 | ~(x_2)))",
        known_incorrect=False,
        comment=None,
    ),
    RuleInfo(
        name="WeirdRule6",
        expr="((x_0 | x_1) + (x_0 & ~(x_1))) => ((x_0 ^ x_1) + x_0)",
        known_incorrect=False,
        comment=None,
    ),
]

# convenient helpers
RULE_BY_EXPR = {r.expr: r for r in RULES}
KNOWN_INCORRECT_RULES = {r.expr for r in RULES if r.known_incorrect}
